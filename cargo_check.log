    Checking lightweight_wallet_libs v0.1.0 (/Users/keith/workspace/tari/tari/lightweight_wallet_libs)
error: cannot find attribute `default` in this scope
  --> lightweight_wallet_libs/src/data_structures/payment_id.rs:30:7
   |
30 |     #[default]
   |       ^^^^^^^
   |
help: consider adding a derive
   |
29 + #[derive(Default)]
30 | pub enum TxType {
   |

error: cannot find derive macro `Zeroize` in this scope
   --> lightweight_wallet_libs/src/data_structures/types.rs:126:39
    |
126 | #[derive(Debug, Clone, PartialEq, Eq, Zeroize)]
    |                                       ^^^^^^^
    |
note: `Zeroize` is imported here, but it is only a trait, without a derive macro
   --> lightweight_wallet_libs/src/data_structures/types.rs:26:15
    |
26  | use zeroize::{Zeroize, Zeroizing};
    |               ^^^^^^^

error: cannot find derive macro `Zeroize` in this scope
  --> lightweight_wallet_libs/src/data_structures/types.rs:62:63
   |
62 | #[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Zeroize)]
   |                                                               ^^^^^^^
   |
note: `Zeroize` is imported here, but it is only a trait, without a derive macro
  --> lightweight_wallet_libs/src/data_structures/types.rs:26:15
   |
26 | use zeroize::{Zeroize, Zeroizing};
   |               ^^^^^^^

error: cannot find derive macro `Zeroize` in this scope
  --> lightweight_wallet_libs/src/data_structures/encrypted_data.rs:64:103
   |
64 | #[derive(Debug, Clone, Deserialize, Serialize, PartialEq, Eq, Hash, BorshSerialize, BorshDeserialize, Zeroize)]
   |                                                                                                       ^^^^^^^
   |
note: `Zeroize` is imported here, but it is only a trait, without a derive macro
  --> lightweight_wallet_libs/src/data_structures/encrypted_data.rs:38:15
   |
38 | use zeroize::{Zeroize, Zeroizing};
   |               ^^^^^^^

error[E0425]: cannot find value `SIZE_VALUE` in this scope
   --> lightweight_wallet_libs/src/data_structures/payment_id.rs:108:45
    |
108 |     const SIZE_VALUE_AND_META_DATA: usize = SIZE_VALUE + PaymentId::SIZE_META_DATA;
    |                                             ^^^^^^^^^^ not found in this scope
    |
help: consider importing this constant
    |
23  + use crate::data_structures::encrypted_data::SIZE_VALUE;
    |

error[E0425]: cannot find value `PADDING_SIZE` in this scope
   --> lightweight_wallet_libs/src/data_structures/payment_id.rs:123:26
    |
123 |                 if len < PADDING_SIZE {
    |                          ^^^^^^^^^^^^ not found in this scope
    |
help: consider using the associated constant on `Self`
    |
123 |                 if len < Self::PADDING_SIZE {
    |                          ++++++

error[E0425]: cannot find value `PADDING_SIZE` in this scope
   --> lightweight_wallet_libs/src/data_structures/payment_id.rs:124:21
    |
124 |                     PADDING_SIZE
    |                     ^^^^^^^^^^^^ not found in this scope
    |
help: consider using the associated constant on `Self`
    |
124 |                     Self::PADDING_SIZE
    |                     ++++++

error[E0425]: cannot find value `PADDING_SIZE` in this scope
   --> lightweight_wallet_libs/src/data_structures/payment_id.rs:144:26
    |
144 |                 if len < PADDING_SIZE {
    |                          ^^^^^^^^^^^^ not found in this scope
    |
help: consider using the associated constant on `Self`
    |
144 |                 if len < Self::PADDING_SIZE {
    |                          ++++++

error[E0425]: cannot find value `PADDING_SIZE` in this scope
   --> lightweight_wallet_libs/src/data_structures/payment_id.rs:145:21
    |
145 |                     PADDING_SIZE
    |                     ^^^^^^^^^^^^ not found in this scope
    |
help: consider using the associated constant on `Self`
    |
145 |                     Self::PADDING_SIZE
    |                     ++++++

error[E0425]: cannot find value `KEY_LEN` in this scope
  --> lightweight_wallet_libs/src/data_structures/types.rs:65:15
   |
65 |     key: [u8; KEY_LEN],
   |               ^^^^^^^ not found in this scope

error[E0425]: cannot find value `KEY_LEN` in this scope
  --> lightweight_wallet_libs/src/data_structures/types.rs:65:15
   |
65 |     key: [u8; KEY_LEN],
   |               ^^^^^^^ not found in this scope
   |
help: you might be missing a const parameter
   |
63 | pub struct PrivateKey<const KEY_LEN: /* Type */> {
   |                      +++++++++++++++++++++++++++

error[E0425]: cannot find value `KEY_LEN` in this scope
  --> lightweight_wallet_libs/src/data_structures/types.rs:73:27
   |
73 |         if bytes.len() != KEY_LEN {
   |                           ^^^^^^^ not found in this scope
   |
help: consider using the associated constant on `Self`
   |
73 |         if bytes.len() != Self::KEY_LEN {
   |                           ++++++

error[E0425]: cannot find value `KEY_LEN` in this scope
  --> lightweight_wallet_libs/src/data_structures/types.rs:74:61
   |
74 |             return Err(format!("Expected {} bytes, got {}", KEY_LEN, bytes.len()));
   |                                                             ^^^^^^^ not found in this scope
   |
help: consider using the associated constant on `Self`
   |
74 |             return Err(format!("Expected {} bytes, got {}", Self::KEY_LEN, bytes.len()));
   |                                                             ++++++

error[E0425]: cannot find value `KEY_LEN` in this scope
  --> lightweight_wallet_libs/src/data_structures/types.rs:76:29
   |
76 |         let mut key = [0u8; KEY_LEN];
   |                             ^^^^^^^ not found in this scope
   |
help: consider using the associated constant on `Self`
   |
76 |         let mut key = [0u8; Self::KEY_LEN];
   |                             ++++++

error[E0425]: cannot find value `COMMITMENT_LEN` in this scope
   --> lightweight_wallet_libs/src/data_structures/types.rs:103:22
    |
103 |     commitment: [u8; COMMITMENT_LEN],
    |                      ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `COMMITMENT_LEN` in this scope
   --> lightweight_wallet_libs/src/data_structures/types.rs:103:22
    |
103 |     commitment: [u8; COMMITMENT_LEN],
    |                      ^^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a const parameter
    |
101 | pub struct CompressedCommitment<const COMMITMENT_LEN: /* Type */> {
    |                                ++++++++++++++++++++++++++++++++++

error[E0425]: cannot find value `COMMITMENT_LEN` in this scope
   --> lightweight_wallet_libs/src/data_structures/types.rs:111:27
    |
111 |         if bytes.len() != COMMITMENT_LEN {
    |                           ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider using the associated constant on `Self`
    |
111 |         if bytes.len() != Self::COMMITMENT_LEN {
    |                           ++++++

error[E0425]: cannot find value `COMMITMENT_LEN` in this scope
   --> lightweight_wallet_libs/src/data_structures/types.rs:112:61
    |
112 |             return Err(format!("Expected {} bytes, got {}", COMMITMENT_LEN, bytes.len()));
    |                                                             ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider using the associated constant on `Self`
    |
112 |             return Err(format!("Expected {} bytes, got {}", Self::COMMITMENT_LEN, bytes.len()));
    |                                                             ++++++

error[E0425]: cannot find value `COMMITMENT_LEN` in this scope
   --> lightweight_wallet_libs/src/data_structures/types.rs:114:36
    |
114 |         let mut commitment = [0u8; COMMITMENT_LEN];
    |                                    ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider using the associated constant on `Self`
    |
114 |         let mut commitment = [0u8; Self::COMMITMENT_LEN];
    |                                    ++++++

warning: unused import: `FixedOutput`
  --> lightweight_wallet_libs/src/data_structures/encrypted_data.rs:36:56
   |
36 | use digest::{consts::U32, generic_array::GenericArray, FixedOutput};
   |                                                        ^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `AEAD_KEY_LEN`
  --> lightweight_wallet_libs/src/data_structures/encrypted_data.rs:43:95
   |
43 |         types::{CompressedCommitment, EncryptedDataKey, MicroMinotari, PrivateKey, SafeArray, AEAD_KEY_LEN},
   |                                                                                               ^^^^^^^^^^^^

warning: unused import: `std::mem::size_of`
  --> lightweight_wallet_libs/src/data_structures/types.rs:23:5
   |
23 | use std::mem::size_of;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `primitive_types::U256`
  --> lightweight_wallet_libs/src/data_structures/types.rs:24:5
   |
24 | use primitive_types::U256;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Zeroizing`
  --> lightweight_wallet_libs/src/data_structures/types.rs:26:24
   |
26 | use zeroize::{Zeroize, Zeroizing};
   |                        ^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `EncryptedDataError`
   --> lightweight_wallet_libs/src/data_structures/encrypted_data.rs:142:89
    |
142 |             PrivateKey::from_canonical_bytes(&bytes[SIZE_VALUE..SIZE_VALUE + SIZE_MASK])?,
    |             ----------------------------------------------------------------------------^ the trait `From<std::string::String>` is not implemented for `EncryptedDataError`
    |             |
    |             this can't be annotated with `?` because it has type `Result<_, std::string::String>`
    |
note: `EncryptedDataError` needs to implement `From<std::string::String>`
   --> lightweight_wallet_libs/src/errors.rs:28:1
    |
28  | pub enum EncryptedDataError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `EncryptedDataError` implements `From<FromHexError>`
              `EncryptedDataError` implements `From<chacha20poly1305::Error>`

error[E0599]: the function or associated item `new` exists for struct `CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<..., ...>>>`, but its trait bounds were not satisfied
   --> lightweight_wallet_libs/src/data_structures/encrypted_data.rs:226:38
    |
226 |     let mut hasher = Blake2b::<U32>::new();
    |                                      ^^^ function or associated item cannot be called due to unsatisfied trait bounds
    |
note: if you're trying to build a new `CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>`, consider using `CoreWrapper::<T>::from_core` which returns `CoreWrapper<_>`
   --> /Users/keith/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/digest-0.10.7/src/core_api/wrapper.rs:70:5
    |
70  |     pub fn from_core(core: T) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the following trait bounds were not satisfied:
            `&CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>: InnerInit`
            which is required by `&CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>: KeyInit`
            `&CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>: InnerUser`
            which is required by `&CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>: KeyInit`
            `&mut CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>: InnerInit`
            which is required by `&mut CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>: KeyInit`
            `&mut CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>: InnerUser`
            which is required by `&mut CoreWrapper<CtVariableCoreWrapper<Blake2bVarCore, UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>, B0>>>: KeyInit`
    = help: items from traits can only be used if the trait is in scope
help: trait `Digest` which provides `new` is implemented but not in scope; perhaps you want to import it
    |
25  + use blake2::Digest;
    |

error[E0616]: field `0` of struct `EncryptedDataKey` is private
   --> lightweight_wallet_libs/src/data_structures/encrypted_data.rs:232:14
    |
232 |     aead_key.0.as_mut().copy_from_slice(result.as_slice());
    |              ^ private field

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> lightweight_wallet_libs/src/data_structures/payment_id.rs:185:48
    |
185 |                 bytes.extend_from_slice(&value.to_big_endian());
    |                                                ^^^^^^^^^^^^^-- argument #1 of type `&mut [u8]` is missing
    |
note: method defined here
   --> /Users/keith/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/primitive-types-0.12.2/src/lib.rs:38:1
    |
38  | / construct_uint! {
39  | |     /// 256-bit unsigned integer.
40  | |     #[cfg_attr(feature = "scale-info", derive(TypeInfo))]
41  | |     pub struct U256(4);
42  | | }
    | |_^
    = note: this error originates in the macro `$crate::construct_uint` which comes from the expansion of the macro `construct_uint` (in Nightly builds, run with -Z macro-backtrace for more info)
help: provide the argument
    |
185 |                 bytes.extend_from_slice(&value.to_big_endian(/* &mut [u8] */));
    |                                                              +++++++++++++++

error[E0308]: mismatched types
    --> lightweight_wallet_libs/src/data_structures/payment_id.rs:185:41
     |
185  |                 bytes.extend_from_slice(&value.to_big_endian());
     |                       ----------------- ^^^^^^^^^^^^^^^^^^^^^^ expected `&[{integer}]`, found `&()`
     |                       |
     |                       arguments to this method are incorrect
     |
     = note: expected reference `&[{integer}]`
                found reference `&()`
note: method defined here
    --> /Users/keith/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:3058:12
     |
3058 |     pub fn extend_from_slice(&mut self, other: &[T]) {
     |            ^^^^^^^^^^^^^^^^^

error[E0599]: the method `as_dyn_error` exists for reference `&Error`, but its trait bounds were not satisfied
  --> lightweight_wallet_libs/src/errors.rs:30:24
   |
30 |     EncryptionFailed(#[from] AeadError),
   |                        ^^^^ method cannot be called on `&Error` due to unsatisfied trait bounds
   |
  ::: /Users/keith/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aead-0.5.2/src/lib.rs:79:1
   |
79 | pub struct Error;
   | ---------------- doesn't satisfy `chacha20poly1305::Error: AsDynError<'_>` or `chacha20poly1305::Error: StdError`
   |
   = note: the following trait bounds were not satisfied:
           `chacha20poly1305::Error: StdError`
           which is required by `chacha20poly1305::Error: AsDynError<'_>`
           `&chacha20poly1305::Error: StdError`
           which is required by `&chacha20poly1305::Error: AsDynError<'_>`

Some errors have detailed explanations: E0061, E0277, E0308, E0425, E0599, E0616.
For more information about an error, try `rustc --explain E0061`.
warning: `lightweight_wallet_libs` (lib) generated 5 warnings
error: could not compile `lightweight_wallet_libs` (lib) due to 25 previous errors; 5 warnings emitted
