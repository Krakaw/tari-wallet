# Caddyfile for Tari WASM Scanner
# Serves static files and proxies API requests to base node to bypass CORS

# Listen on localhost:8080
:8080 {
	# Enable detailed logging
	log {
		output stdout
		format console
		level INFO
	}

	# Add CORS headers for all responses
	header {
		Access-Control-Allow-Origin "*"
		Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
		Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
		Access-Control-Max-Age "86400"
	}

	# Handle OPTIONS requests for CORS preflight
	@options method OPTIONS
	respond @options 204
@test_html path /test.html /
	handle @test_html {
		header Content-Type "text/html; charset=utf-8"
		try_files /test.html
		file_server {
			root .
		}
	}


	# Serve the main scanner HTML file
	@scanner_html path /scanner.html /
	handle @scanner_html {
		header Content-Type "text/html; charset=utf-8"
		try_files /scanner.html
		file_server {
			root .
		}
	}

	# Serve WASM-generated JavaScript files (highest priority)
	@wasm_js_files path /lightweight_wallet_libs.js
	handle @wasm_js_files {
		header Content-Type "application/javascript; charset=utf-8"
		file_server {
			root .
		}
	}

	# Serve WASM-generated TypeScript definition files
	@wasm_ts_files path /lightweight_wallet_libs.d.ts /lightweight_wallet_libs_bg.wasm.d.ts
	handle @wasm_ts_files {
		header Content-Type "text/plain; charset=utf-8"
		file_server {
			root .
		}
	}

	# Serve WASM files
	@wasm_files path /lightweight_wallet_libs_bg.wasm
	handle @wasm_files {
		header Content-Type "application/wasm"
		file_server {
			root .
		}
	}

	# Serve other JavaScript files
	@other_js_files path *.js
	handle @other_js_files {
		header Content-Type "application/javascript; charset=utf-8"
		file_server {
			root .
		}
	}

	# Serve other static files (if any)
	@static_files path *.css *.png *.jpg *.gif *.ico *.svg *.woff *.woff2 *.ttf *.eot
	handle @static_files {
		file_server {
			root .
		}
	}

	# Proxy API requests to Tari base node
	@api_requests path /get_* /sync_* /submit_* /search_* /fetch_*
	handle @api_requests {
		reverse_proxy http://127.0.0.1:9000 {
			# Add real IP header for identification
			header_up X-Real-IP {remote_host}
			
			# Handle base node errors gracefully
			@error status 5xx
			handle_response @error {
				header Content-Type "application/json"
				respond `{"error": "Base node unavailable", "status": {http.reverse_proxy.status_code}}` {http.reverse_proxy.status_code}
			}
		}
	}

	# Catch-all: proxy any other requests to base node (for unknown API endpoints)
	handle {
		reverse_proxy http://127.0.0.1:9000 {
			# Add real IP header for identification
			header_up X-Real-IP {remote_host}
			
			@error status 5xx
			handle_response @error {
				header Content-Type "application/json"
				respond `{"error": "Base node unavailable", "status": {http.reverse_proxy.status_code}}` {http.reverse_proxy.status_code}
			}
		}
	}
}
